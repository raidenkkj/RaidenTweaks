#!/system/bin/sh
# shellcheck disable=SC3054
# shellcheck disable=SC3043
# shellcheck disable=SC3037
# shellcheck disable=SC3030
# shellcheck disable=SC3028
# shellcheck disable=SC3014
# shellcheck disable=SC3010
# shellcheck disable=SC2181
# shellcheck disable=SC2162
# shellcheck disable=SC2145
# shellcheck disable=SC2034
# shellcheck disable=SC2004
# shellcheck disable=SC2002
# shellcheck disable=SC1091
#
# raidenTweaks™ is a simple kernel tweaker.
# Copyright (C) 2021~2024  Raiden Ishigami <contact.raidenishi69@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
# This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.

# Magisk Module ID **
ID="RTKS"

# Detect root
_name=$(basename "$0")
ls /data >/dev/null 2>&1 || { echo "raidenTweaks needs to run as root!"; echo "type 'su' then '$_name' or su -c '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules" || [ -d "/data/adb/modules" ] && MOUNTPATH="/data/adb/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d "$MODDIR" ] && { echo "[!] raidenTweaks missing..."; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. "$MODDIR"/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null

# Check logs dir
if [[ ! -d "/sdcard/.RTKS" ]]; then
  mkdir /sdcard/.RTKS
fi

# > Logs should go in this file
RLOG=/sdcard/.RTKS/raidenTweaks.log
MLOG=/sdcard/.RTKS/raidenTweaks-menu.log
oldMLOG=/sdcard/.RTKS/raidenTweaks-old.log
# > Verbose output goes here
VERLOG=/sdcard/.RTKS/raidenTweaks-menu-verbose.log
oldVERLOG=/sdcard/.RTKS/raidenTweaks-menu-verbose-old.log
stdoutLOG=$MODDIR/logs/raidenTweaks-menu-STDOUT.log
oldstdoutLOG=$MODDIR/logs/raidenTweaks-menu-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $MLOG $oldMLOG 2>/dev/null; mv -f "$stdoutLOG" "$oldstdoutLOG" 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

# Profile (getprop)
rtks_prof=$(getprop persist.raidentweaks.mode)

# Modpath
modpath="/data/adb/modules/RTKS/"

# Ram usage
total_mem=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')
free_mem=$(cat /proc/meminfo | grep MemFree | awk '{print $2}')
buffers=$(cat /proc/meminfo | grep Buffers | awk '{print $2}')
cached=$(cat /proc/meminfo | grep "^Cached" | awk '{print $2}')

used_mem=$((total_mem - free_mem - buffers - cached))
used_percentage=$((used_mem * 100 / total_mem))

# Define variables for each GApps package
GSF="com.google.android.gsf"
GSF_LOGIN="com.google.android.gsf.login"
GMS="com.google.android.gms"
IMS="com.google.android.ims"
CARRIER_LOG="com.google.android.apps.carrier.log"
VENDING="com.android.vending"
PLAY_GAMES="com.google.android.play.games"
SYNC_CONTACTS="com.google.android.syncadapters.contacts"

# Check status of each GApps package and set the appropriate variable
if pm list packages | grep -q $GSF; then
  if pm list packages -d | grep -q $GSF; then
    GSF_STATUS="Disabled"
  else
    GSF_STATUS="Enabled"
  fi
else
  GSF_STATUS="Not installed"
fi

if pm list packages | grep -q $GSF_LOGIN; then
  if pm list packages -d | grep -q $GSF_LOGIN; then
    GSF_LOGIN_STATUS="Disabled"
  else
    GSF_LOGIN_STATUS="Enabled"
  fi
else
  GSF_LOGIN_STATUS="Not installed"
fi

if pm list packages | grep -q $GMS; then
  if pm list packages -d | grep -q $GMS; then
    GMS_STATUS="Disabled"
  else
    GMS_STATUS="Enabled"
  fi
else
  GMS_STATUS="Not installed"
fi

if pm list packages | grep -q $IMS; then
  if pm list packages -d | grep -q $IMS; then
    IMS_STATUS="Disabled"
  else
    IMS_STATUS="Enabled"
  fi
else
  IMS_STATUS="Not installed"
fi

if pm list packages | grep -q $CARRIER_LOG; then
  if pm list packages -d | grep -q $CARRIER_LOG; then
    CARRIER_LOG_STATUS="Disabled"
  else
    CARRIER_LOG_STATUS="Enabled"
  fi
else
  CARRIER_LOG_STATUS="Not installed"
fi

if pm list packages | grep -q $VENDING; then
  if pm list packages -d | grep -q $VENDING; then
    VENDING_STATUS="Disabled"
  else
    VENDING_STATUS="Enabled"
  fi
else
  VENDING_STATUS="Not installed"
fi

if pm list packages | grep -q $PLAY_GAMES; then
  if pm list packages -d | grep -q $PLAY_GAMES; then
    PLAY_GAMES_STATUS="Disabled"
  else
    PLAY_GAMES_STATUS="Enabled"
  fi
else
  PLAY_GAMES_STATUS="Not installed"
fi

if pm list packages | grep -q $SYNC_CONTACTS; then
  if pm list packages -d | grep -q $SYNC_CONTACTS; then
    SYNC_CONTACTS_STATUS="Disabled"
  else
    SYNC_CONTACTS_STATUS="Enabled"
  fi
else
  SYNC_CONTACTS_STATUS="Not installed"
fi

# Profiles (case)
case "${rtks_prof}" in
  1)
    rtks_prof=Automatic
    ;;
  2)
    rtks_prof=Battery
    ;;
  3)
    rtks_prof=Balanced
    ;;
  4)
    rtks_prof=Performance
    ;;
  5)
    rtks_prof=Gaming
    ;;
  6)
    rtks_prof=Thermal
    ;;
esac

# Thermal
if [[ "$(getprop init.svc.thermal-engine)" == "running" ]]; then
  ts=On
elif [[ "$(getprop init.svc.thermal-engine)" == "stopped" ]]; then
  ts=Off
else
  ts=Unknown
fi

# Low ram
if [[ "$(grep_prop ro.config.low_ram ${modpath}system.prop)" == "true" ]]; then
  lr=Enabled
elif [[ "$(grep_prop ro.config.low_ram ${modpath}system.prop)" == "false" ]]; then
  lr=Disabled
else
  lr=Unknown
fi

# Device SDK
sdk=$(getprop ro.build.version.sdk)
[[ "$sdk" == "" ]] && sdk=$(getprop ro.vendor.build.version.sdk)
[[ "$sdk" == "" ]] && sdk=$(getprop ro.vndk.version)

# Developer
dev="raidenkk"

# Magisk version
magisk=$(magisk -V)

# Low power
[[ "$(settings get global low_power)" == "1" ]] && low_power_mode="Enabled" || low_power_mode="Disabled"

# Main menu
main_menu() {
  if [[ "$FIRST_TIME" = "true" ]]; then
    printf "\033c"
    case $(getprop persist.sys.locale) in
        "en-US" | "en-GB")
            echo "${B}Welcome to the menu! It seems it's your first time here. You're officially part of the club now!${N}"
            ;;
        "pt-BR")
            echo "${B}Bem vindo ao menu! Parece que é sua primeira vez aqui. Você faz parte oficialmente do clube agora!${N}"
            ;;
        *)
            echo "${B}Welcome to the menu! It seems it's your first time here. You're officially part of the club now!${N}"
            ;;
    esac
    
    sleep 6
    sed -i 's/FIRST_TIME="false"/FIRST_TIME="true"/' ${modpath}mod-util.sh
    printf "\033c"
  fi

  echo -e '\n'
  printf "\033c"
  echo "${C}╔══════════════════════════════════════════════╗${N}"
  echo "${C}║${B}         Welcome to raidenTweaks menu         ${C}║${N}"
  echo "${C}║${B}  Created and written by $dev @ telegram  ${C}║${N}"
  echo "${C}╚══════════════════════════════════════════════╝${N}"
  echo ""
  echo "${Y}[*] Your device:${B} $(getprop ro.product.model) ${N}"
  echo ""
  echo "${Y}[*] Your current profile:${B} $rtks_prof ${N}"
  echo ""
  echo "${Y}[*] Version:${B} $(grep_prop version "$modpath"module.prop) - $(grep_prop codename "$modpath"module.prop) ${N}"
  echo ""
  echo "${Y}[*] Magisk version:${B} $magisk ${N}"
  echo ""
  echo "${Y}[*] Thermal state:${B} $ts ${N}"
  echo ""
  echo "${Y}[*] Low ram state:${B} $lr ${N}"
  echo ""
  echo "${C}╔══════════════════════════════════════════════╗${N}"
  echo "${C}║${B}             [*] Profile selector             ${C}║${N}"
  echo "${C}╚══════════════════════════════════════════════╝${N}"
  echo ""
  echo "${V}[AUT] Automatic: Focused on applying profiles in specific conditions. ${N}"
  echo ""
  echo "${B}[BAT] Battery: Focused on saving as much battery as possible.${N}"
  echo ""
  echo "${G}[BAL] Balanced: Focused on leaving the system balanced.${N}"
  echo ""
  echo "${Y}[PER] Performance: Focused on maximizing your device's performance.${N}"
  echo ""
  echo "${R}[GAM] Gaming: Focused on improving your gaming/all performance.${N}"
  echo ""
  echo "${C}[THE] Thermal: Focused on making your device heat free, cold.${N}"
  echo ""
  echo "${C}╔══════════════════════════════════════════════╗${N}"
  echo "${C}║${B}             [*] Miscellaneous                ${C}║${N}"
  echo "${C}╚══════════════════════════════════════════════╝${N}"
  echo ""
  if [[ "$ts" == "On" ]]; then
    echo "${Y}[1] Disable thermal-engine ${C}(This will disable the thermal-engine)${N}"
    echo ""
  elif [[ "$ts" == "Off" ]]; then
    echo "${Y}[1] Enable thermal-engine ${C}(This will enable the thermal-engine)${N}"
    echo ""
  else
    echo "${Y}[1*] Thermal-engine ${R}(Disabled - Incompatibility)${N}"
    echo ""
  fi
  if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${Y}[2] Enable low power mode ${C}(This will enable maximum battery saver)${N}"
    echo ""
  elif [[ "$low_power_mode" == "Enabled" ]]; then
    echo "${Y}[2] Disable low power mode ${C}(This will disable maximum battery saver)${N}"
    echo ""
  else
    echo "${Y}[2*] Low power mode ${R}(Disabled - Incompatibility)${N}"
    echo ""
  fi
  if [[ "$lr" == "Enabled" ]]; then
    echo "${Y}[3] Disable low ram ${C}(This will disable low ram mode)${N}"
    echo ""
  elif [[ "$lr" == "Disabled" ]]; then
    echo "${Y}[3] Enable low ram ${C}(This will enable low ram mode)${N}"
    echo ""
  elif [[ "$lr" == "Unknown" ]]; then
    echo "${Y}[3] Enable low ram ${C}(This will enable low ram mode)${N}"
    echo ""
  fi
  if [[ "$GMS_STATUS" == "Disabled" ]]; then
    echo "${Y}[4] Enable GApps ${C}(This will enable some of your gapps packages)${N}"
    echo ""
  elif [[ "$GMS_STATUS" == "Enabled" ]]; then
    echo "${Y}[4] Disable GApps ${C}(This will disable some of your gapps packages)${N}"
    echo ""
  else
    echo "${Y}[4*] GApps ${R}(Disabled - Incompatibility)${N}"
    echo ""
  fi    
  echo "${Y}[5] Fstrim on some partitions ${C}This will fstrim specific partitions)${N}"
  echo ""
  echo "${Y}[6] Optimize application package ${C}(This will optimize the application packages)${N}"
  echo ""
  echo "${Y}[7] Clear RAM [ ${B}BASIC ${Y}] ${C}(This one will just drop all  caches)${N}"
  echo ""
  echo "${Y}[8] Clear RAM [ ${B}HEAVY ${Y}] ${C}(This will drop cache and kill background apps)${N}"
  echo ""
  echo "${Y}[9] Clear RAM [ ${B}ADVANCED ${Y}] ${C}(This will drop cache and kill all apps)${N}"
  echo ""
  echo "${Y}[10] Clean up unnecessary files ${C}(I.e. system logs, debug logs, etc.)${N}"
  echo ""
  echo "${Y}[11] Clear battery status ${C}(This will clear old battery status)${N}"
  echo ""
  echo "${Y}[12] Low memory killer menu ${C}(A secondary menu with lmk profiles)${N}"
  echo ""
  echo "${Y}[13] Unlocker menu ${C}(A tertiary menu with possibility to change unlockers)${N}"
  echo ""
  echo "${Y}[T] Telegram group ${C}(To answer your questions / report bugs)${N}"
  echo ""
  echo "${B}[A] About the module ${C}(Informations)${N}"
  echo ""
  echo "${B}[S] Send logs to developer ${C}(This will prepare the logs to be sent to dev)${N}"
  echo ""
  echo "${R}[U] Uninstall raidenTweaks ${C}(Will remove the module / files from your system)${N}"
  echo ""
  echo "${R}[G] Go out.${N}"
  echo ""
  echo "${C}╔══════════════════════════════════════════════╗${N}"
  echo "${C}║${B}               [*] Selection                  ${C}║${N}"
  echo "${C}╚══════════════════════════════════════════════╝${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  option=$(echo "$option" | tr '[:lower:]' '[:upper:]')
  case $option in
    AUT) automatic_profile ;;
    BAT) battery_profile ;;
    BAL) battery_profile ;;
    PER) performance_profile ;;
    GAM) gaming_profile ;;
    THE) thermal_profile ;;
    1) enable_disable_thermal ;;
    2) enable_disable_lowpower ;;
    3) enable_disable_low_ram ;;
    4) enable_disable_gapps ;;
    5) run_fstrim ;;
    6) optimize_packages ;;
    7) clear_ram_basic ;;
    8) clear_ram_heavy ;;
    9) clear_ram_advanced ;;
    10) clean_trash ;;
    11) clear_battery_status ;;
    12) open_lmkmenu ;;
    13) open_unlockermenu ;;
    T) open_telegram_group ;;
    A) about ;;
    S) send_logs ;;
    U) uninstall_module ;;
    G) go_out ;;
    *)
      echo ""
      echo "${R}[*] Unknown option, returning to menu."
      sleep 2
      main_menu 
      ;;
  esac
}

# Automatic profile
automatic_profile() {
  printf "\033c"
  echo "${G}Putting the profile in automatic mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "1" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Battery profile
battery_profile() {
  printf "\033c"
  echo "${G}Putting the profile in battery mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "2" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Balanced profile
balanced_profile() {
  printf "\033c"
  echo "${G}Putting the profile in balanced mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "3" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Performance profile
performance_profile() {
  printf "\033c"
  echo "${G}Putting the profile in performance mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "4" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Gaming profile
gaming_profile() {
  printf "\033c"
  echo "${G}Putting the profile in gaming mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "5" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Thermal profile
thermal_profile() {
  printf "\033c"
  echo "${G}Putting the profile in thermal mode...${N}"
  sleep 0.5
  echo ""
  setprop persist.raidentweaks.mode "6" 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  sleep 0.5
  echo ""
  echo "${G}Process finished!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Enable/disable thermal
enable_disable_thermal() {
  printf "\033c"
  if [[ "$ts" == "On" ]]; then
    echo "${G}Disabling thermal...${N}"
    echo ""
    echo "${R}Warning: Your device may get hot.${N}"
    echo "${R}This will not work on MIUI!${N}"
    sleep 0.5
    stop thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
  elif [[ "$ts" == "Off" ]]; then
    echo "${G}Enabling thermal engine...${N}"
    sleep 0.5
    start thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
  else
    echo "${R}Thermal status not detected, returning to menu...${N}"
    sleep 3
    rtksmenu
  fi
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Enable/disable low power
enable_disable_lowpower() {
  printf "\033c"
  if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${G}Enabling low power mode...${N}"
    sleep 0.5
    echo ""
    settings put global low_power 1 2>/dev/null
    settings put global low_power_sticky 1 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings put global forced_app_standby_enabled 1 2>/dev/null
    settings put global app_auto_restriction_enabled true 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 1 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
  elif [[ "$low_power_mode" == "Enabled" ]]; then
    echo "${G}Disabling low power mode...${N}"
    sleep 0.5
    settings put global low_power 0 2>/dev/null
    settings reset global low_power 2>/dev/null
    settings put global low_power_sticky 0 2>/dev/null
    settings reset global low_power_sticky 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings reset global app_standby_enabled 2>/dev/null
    settings put global forced_app_standby_enabled 0 2>/dev/null
    settings reset global forced_app_standby_enabled 2>/dev/null
    settings put global app_auto_restriction_enabled false 2>/dev/null
    settings reset global app_auto_restriction_enabled 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 0 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
  fi
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Enable/disable low ram
enable_disable_low_ram() {
  printf "\033c"
  if [[ "$lr" == "Enabled" ]]; then
    echo "${G}Disabling low ram.${N}"
    sleep 0.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=false/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
  elif [[ "$lr" == "Disabled" ]]; then
    echo "${G}Enabling low ram...${N}"
    echo ""
    echo "${G}Features affected by the low-ram property:${N}"
    echo "${C}- Flat recent / multitasking UI, multi-users disabled${N}"
    sleep 0.8
    echo "${C}- High-end graphics disabled${N}"
    sleep 0.8
    echo "${C}- Less recent apps cache${N}"
    sleep 0.8
    echo "${C}- Multi-windows disabled${N}"
    sleep 0.8
    echo "${C}- Minor notification icons changes${N}"
    sleep 0.8
    echo "${C}- Less logger buffer sizes (devs)${N}"
    sleep 0.8
    echo "${C}- No apps notifications access / zen access / VR listeners / picture in picture (PIP) accesses.​${N}"
    sleep 1.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=true/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
  elif [[ "$lr" == "Unknown" ]]; then
    echo "${G}Enabling low ram...${N}"
    echo ""
    echo "${G}Features affected by the low-ram property:${N}"
    echo "${C}- Flat recent / multitasking UI, multi-users disabled${N}"
    sleep 0.8
    echo "${C}- High-end graphics disabled${N}"
    sleep 0.8
    echo "${C}- Less recent apps cache${N}"
    sleep 0.8
    echo "${C}- Multi-windows disabled${N}"
    sleep 0.8
    echo "${C}- Minor notification icons changes${N}"
    sleep 0.8
    echo "${C}- Less logger buffer sizes (devs)${N}"
    sleep 0.8
    echo "${C}- No apps notifications access / zen access / VR listeners / picture in picture (PIP) accesses.​${N}"
    sleep 1.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=true/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
  fi
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Enable/disable GApps
enable_disable_gapps() {
  printf "\033c"
  if [[ "$GMS_STATUS" == "Enabled" ]]; then
    echo "${G}Disabling gapps, please wait...${N}"
    sleep 0.5
    pm disable $GSF 2>/dev/null
    pm disable $GSF_LOGIN 2>/dev/null
    pm disable $GMS 2>/dev/null
    pm disable $IMS 2>/dev/null
    pm disable $CARRIER_LOG 2>/dev/null
    pm disable $VENDING 2>/dev/null
    pm disable $PLAY_GAMES 2>/dev/null
    pm disable $SYNC_CONTACTS 2>/dev/null
  elif [[ "$GMS_STATUS" == "Disabled" ]]; then
    echo "${G}Enabling gapps, please wait...${N}"
    sleep 0.5
    pm enable $GSF 2>/dev/null
    pm enable $GSF_LOGIN 2>/dev/null
    pm enable $GMS 2>/dev/null
    pm enable $IMS 2>/dev/null 
    pm enable $CARRIER_LOG 2>/dev/null
    pm enable $VENDING 2>/dev/null
    pm enable $PLAY_GAMES 2>/dev/null
    pm enable $SYNC_CONTACTS 2>/dev/null
  else
    echo "${R} [!] Due to incompatibility you cannot use this option, returning to the menu..."
    sleep 2
    return_rtksmenu
  fi
  echo ""
  echo "${G}Process finished.${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Fstrim
run_fstrim() {
  printf "\033c"
  echo "${G}Fstrim initializing, please wait.${N}"
  rfstrim 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Optimize packages
optimize_packages() {
  printf "\033c"
  echo "${G}Optimizing application packages, please wait...${N}"
  sleep 0.5
  echo ""
  echo "${G}[!] This process takes time under certain circumstances.${N}"
  echo ""
  pm compile -a -f --compile-layouts
  cmd package bg-dexopt-job
  echo ""
  echo "${G}Process finished.${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Clear ram (basic)
clear_ram_basic() {
  printf "\033c"
  echo "${G}Dropping all caches, wait, it's very fast.${N}"
  sleep 0.5
  sync
  echo "3" > "/proc/sys/vm/drop_caches"
  echo ""
  echo "${G}Process finished!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Clear ram (advanced)
clear_ram_advanced() {
  printf "\033c"
  echo "${G}Dropping caches and killing background processes, wait patiently...${N}"
  sleep 0.5
  sync
  echo "3" > "/proc/sys/vm/drop_caches"
  am kill-all
  echo ""
  echo "${G}Process finished!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Clear ram (heavy)
clear_ram_heavy() {
  printf "\033c"
  echo "${G}Dropping all caches and killing all processes, wait there.${N}"
  sleep 0.5
  sync
  echo "3" > "/proc/sys/vm/drop_caches"
  am kill-all
  sleep 2
  echo ""
  clear_ram_advanced
  echo ""
  old_ram=$(cat /data/local/tmp/temp_ram_usage.txt | tr -d '%')
  new_ram=$(cat /data/local/tmp/temp_ram_usage_after.txt | tr -d '%')
  reduction=$((old_ram - new_ram))
  echo "${G}Process finished, you freed up ${reduction}% of RAM.${N}"
  rm -rf /data/local/tmp/temp_ram_usage.txt
  rm -rf /data/local/tmp/temp_ram_usage_after.txt
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Clean trash
clean_trash() {
  printf "\033c"
  echo "${G}Cleaning up useless residual files...${N}"
  sleep 1
  cleaner 2>/dev/null
  [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Clear battery status
clear_battery_status() {
  printf "\033c"
  echo "${G}Clearing battery status, please wait.${N}"
  sleep 0.5
  rm -f /data/system/batterystats.bin
  echo ""
  echo "${G}Process finished!${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Open lmkmenu
open_lmkmenu() {
  printf "\033c"
  echo "${G}Opening low memory killer menu...${N}"
  sleep 2
  lmkmenu
}

# Open unlockermenu
open_unlockermenu() {
  printf "\033c"
  echo "${G}Opening unlocker menu...${N}"
  sleep 2
  unlockermenu
}

# Open telegram group
open_telegram_group() {
  printf "\033c"
  echo "${G}Access telegram group (support)${N}"
  sleep 2
  am start -a android.intent.action.VIEW -d https://t.me/raidenprjktsgroup
  rtksmenu
}

# About
about() {
  printf "\033c"
  echo "${G}Module informations:${N}"
  echo "${C}This module is focused on your experience, that's right, with this module you can choose several profiles according to your taste.${N}"
  echo "${C}Enjoy your time with what you love to do, good luck!! Please give me feedback on my telegram :)${N}"
  echo ""
  echo "${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Send logs
send_logs() {
  printf "\033c"
  upload_logs
  echo ""
  echo "${N}${B}[ 1 ] Return${N}"
  echo "${B}[ 0 ] Go out${N}"
  echo "${B}[ T ] Open telegram group${N}"
  echo ""
  echo "${C}Select your option:${N} \c"
  read option
  case $option in
    1) return_to_main_menu ;;
    0) go_out ;;
    T) open_telegram_group ;;
    *) 
      echo ""
      echo "${R}Invalid option, returning to menu.${N}"
      sleep 2
      return_to_main_menu
      ;;
  esac
}

# Uninstall module
uninstall_module() {
  printf "\033c"
  echo "${G}Okay, i understand... uninstalling the Raiden Tweaks module...${N}"
  sleep 0.5
  echo ""
  rm -rf /data/adb/modules/RTKS
  rm -rf /storage/emulated/0/.RTKS
  rm -rf /data/local/RaidenTweaks.apk
  rm -rf /data/local/RDToast.apk

  if [ "$(pm list package org.rtks.raiden)" ]; then
    pm uninstall -k --user 0 org.rtks.raiden
  fi

  if [ "$(pm list package bellavita.toast)" ]; then
    pm uninstall -k --user 0 bellavita.toast
  fi

  echo "${G}Module uninstalled, now we will restart your device.${N}"
  sleep 1
  echo "${G}In a few seconds the device will restart.${N}"
  echo ""
  sleep 1.7
  # This progress bar is not a real process
  echo "${G} - Progress bar -"
  echo -ne "${B}[${W}==>             ${B}]   ${BGBL}[20%]\r"
  sleep 1.5
  echo -ne "${N}${B}[${W}=======>        ${B}]   ${BGBL}[40%]\r"
  sleep 1.6
  echo -ne "${N}${B}[${W}===========>    ${B}]   ${BGBL}[60%]\r"
  sleep 1.5
  echo -ne "${N}${B}[${W}==============> ${B}]   ${BGBL}[80%]\r"
  sleep 1.7
  echo -ne "${N}${B}[${W}===============>${B}]  ${BGBL}[100%]\r"
  echo -ne '\n'
  #reboot system
}


# Return to main menu
return_to_main_menu() {
  printf "\033c"
  rtksmenu
  printf "\033c"
}

# Go out
go_out() {
  printf "\033c"
  echo ""
  bye_messages=("Bye bye, see you next time." 
                 "Goodbye! Have a great day!"
                 "See ya later, alligator!"
                 "Farewell! Come back soon!"
                 "Adios amigo! Hasta la vista!"
                 "Take care of yourself and see you soon!"
                 "Until next time, keep smiling!")
  random_index=$((RANDOM % ${#bye_messages[@]}))
  echo "${B}${bye_messages[$random_index]}${N}"
  echo ""
  exit
}

# Test if input is empty
if [ $# -eq 0 ]; then
  main_menu
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -p|--profile)
      if [[ "$2" == "1" ]]; then
        apply_profile "1" "automatic"
      elif [[ "$2" == "2" ]]; then
        apply_profile "2" "balanced"
      elif [[ "$2" == "3" ]]; then
        apply_profile "3" "battery"
      elif [[ "$2" == "4" ]]; then
        apply_profile "4" "performance"
      elif [[ "$2" == "5" ]]; then
        apply_profile "5" "gaming"
      elif [[ "$2" == "6" ]]; then
        apply_profile "6" "thermal"
      else
        echo ""
        echo "${R}[!] Error: invalid option or null output.${N}"
        echo ""
      fi
      shift
      exit
      ;;
    -u|--update-all)
      update_all
      shift
      exit
      ;;
    -c|--clear-ram)
      if [[ "$2" == "1" ]]; then
        echo ""
        echo "${G}[*] Dropping all caches, wait, it's very fast.${N}"
        sleep 0.5
        sync
        echo "3" >"/proc/sys/vm/drop_caches"
        echo ""
        echo "${G}[*] Done.${N}"
        echo ""
      elif [[ "$2" == "2" ]]; then
        echo ""
        echo "${G}[*] Dropping caches and killing background processes, wait patiently...${N}"
        sleep 0.5
        sync
        echo "3" >"/proc/sys/vm/drop_caches"
        am kill-all
        echo ""
        echo "${G}[*] Done.${N}"
        echo ""
      elif [[ "$2" == "3" ]]; then
        echo ""
        echo "${G}[*] Dropping all caches and killing all processes, wait there.${N}"
        sleep 0.5
        sync
        echo "3" >"/proc/sys/vm/drop_caches"
        am kill-all
        sleep 2
        echo ""
        clear_ram_advanced
        echo ""
        echo "${G}[*] Done.${N}"
        echo ""
      else
        echo ""
        echo "${R}[!] Error: invalid option or null output.${N}"
        echo ""
      fi
      shift
      exit
      ;;
    -t|--thermal)
      if [[ "$2" == "disable" ]]; then
        echo ""
        echo "${G}[*] Disabling thermal...${N}"
        echo ""
        echo "${R}Warning: Your device may get hot.${N}"
        echo "${R}This will not work on MIUI!${N}"
        sleep 0.5
        stop thermal-engine
        echo ""
        echo "${G}[*] Process finished.${N}"
        echo ""
      elif [[ "$2" == "enable" ]]; then
        echo ""
        echo "${G}[*] Enabling thermal engine...${N}"
        sleep 0.5
        start thermal-engine
        echo ""
        echo "${G}[*] Process finished.${N}"
        echo ""
      else
        echo ""
        echo "${R}[!] Error: invalid option or null output.${N}"
        echo ""
      fi
      shift
      exit
      ;;
    -d|--downsample)
      if [[ "$2" == "apply" ]]; then
        # Variable for current resolution
        screen_res="$(wm size | cut -d' ' -f3)"
        
        # Message to inform the user about the start of the process
        echo ""
        echo "${G}[*] Starting screen downsampling...${N}"
        sleep 1.5
        echo ""
        echo "${G}[*] Your current resolution is: ${B}$screen_res${N}"
        sleep 0.5
        
        # Separate width and height into variables
        width="$(echo "$screen_res" | cut -dx -f1)"
        height="$(echo "$screen_res" | cut -dx -f2)"
        
        # Divide the individual values ​​by two
        new_width=$(( $width / 2 ))
        new_height=$(( $height / 2 ))
      
        # New resolution 
        new_screen_res="${new_width}x${new_height}"
      
        # Backup original screen resolution settings
        backup_file="/data/local/screen_res.txt"
        if [ ! -f "$backup_file" ]; then
          echo ""
          echo "${G}[*] Creating backup of resolution before modifying...${N}"
          echo "$screen_res" > "$backup_file"
          line="1"
          echo "${G}[*] Done, backup created.${N}"
          echo ""
        fi
        
        # Apply new screen resolution
        if [[ ! "$line" == "1" ]]; then
          echo ""
        fi
        echo "${G}[*] Applying new resolution...${N}"
        sleep 1.5
        wm size "$new_screen_res"
        echo "${G}[*] New screen resolution applied: ${B}$new_screen_res${N}"
        echo ""
        echo "${G}[*] The downsample process has been completed.${N}"
        echo ""
      elif [[ "$2" == "restore" ]]; then
        # Inform the user about starting the restore
        echo ""
        echo "${G}[*] Starting the upsampling process...${N}"
        sleep 1.5
        # Restore original screen resolution
        backup_file="/data/local/screen_res.txt"
        original_res="$(cat "$backup_file")"
        screen_res="$(wm size | cut -d' ' -f3)"
        
        if [ "$original_res" = "$screen_res" ]; then
          echo ""
          echo "${R}[!] Original screen resolution is the same as current resolution, no changes made.${N}"
          echo ""
          exit 1
        else
          wm size "$original_res"
          echo ""
          echo "${G}[*] Original screen resolution restored: ${B}$original_res${N}"
          echo ""
          echo "${G}[*] The upsample process has been completed.${N}"
          echo ""
        fi
      else
        echo ""
        echo "${R}[!] Error: invalid option or null output.${N}"
        echo ""
      fi
      exit
      ;;
    -h|--help)
      help_text
      ;;
    *)
      echo ""
      echo "${R}[!] Unknown option: ${B}$key${N}"
      echo ""
      sleep 3
      clear
      help_text
      exit 1
      ;;
  esac
done
